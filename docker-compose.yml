version: '3' # docker-compose的版本号
services:
  web:
    build: ./packages/web # 指定构建镜像的目录
    image: blog_web_image # 指定构建出来的镜像名
    container_name: blog_web_v1
    ports:
      - "7010:80" # 当以 主机:容器 的形式来映射端口时，如果使容器的端口小于60，那可能会出现错误，因为YAML会将 xx:yy这样格式的数据解析为六十进制的数据，基于这个原因，时刻记得要将端口映射明确指定为字符串
    volumes:
      - ./packages/shared/env/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf # 把 nginx 配置统一管理
      - ./packages/web/dist:/usr/share/nginx/html/dist # 开启将使在容器打包生成的内容被覆盖,建议在开发环境下开启 开启后修改 web 后运行 pnpm build 就可以直接看到更新内容
  server: # 服务名唯一，配置 blog 后台服务
    # 简写 build: ./server
    build: # 启动服务时先将 build 指令中的 Dockerfile 打包成镜像，再去运行镜像，镜像名会带有前缀（当前的目录名）
      context: ./packages/server #指定 Dockerfile 所在的上下文目录，"." 表示当前目录
      dockerfile: Dockerfile # Dockerfile 文件名称
    image: blog_server_image
    container_name: blog_server_v1 # 容器名称
    ports:
      - "7011:7011" # 宿主主机端口号:容器端口号
    depends_on: # blog 服务依赖的其他服务，按照指定的顺序先启动依赖的服务，再启动后端项目服务
      # - postgres
      - mysql
      - redis
      - nginx

  mysql:
    image: mysql:5.7
    container_name: blog_mysql_v1
    ports:
      - "3306:3306"
    volumes:
      - ./packages/env/mysql/data:/data # 挂载 mysql 存储数据目录到容器中，持久化数据库数据，避免因容器停止导致数据丢失的情况
    environment:
      - MYSQL_ROOT_PASSWORD=123456

  # 配置redis
  redis:
    image: redis:latest # redis镜像
    container_name: blog_redis_v1 # redis镜像的容器名称
    ports:
      - "6379:6379" # 主机端口：容器端口的映射，后台项目服务中配置文件中为 redis 配置的端口，要为主机端口
    volumes:
      - ./packages/env/redis/data:/data # 挂载 Redis 存储数据目录到容器中，持久化数据库数据，避免因容器停止导致数据丢失的情况
    command: "redis-server --appendonly yes" # 此命令用来覆盖容器默认命令
  # 配置postgres
  postgres:
    image: postgres:latest
    container_name: blog_postgres_v1
    ports:
      - "5432:5432"
    volumes:
      - ./packages/env/psotgres/data:/data/db # 挂载postgres数据目录到容器中，持久化数据库数据
    environment: # 配置postgres的环境变量
      POSTGRES_PASSWORD: root # 设置postgres的连接（即数据库）密码，默认用户名为postgres，其他数据库可以手动设置用户名和密码
  # 配置nginx
  nginx:
    image: nginx:latest
    container_name: blog_nginx_v1
    ports:
      - 7010:80 # 注意此处配置的端口要和 ./env/nginx/conf/nginx.conf 文件中监听的端口一致
    volumes:
      - ./packages/web/dist:/usr/local/nginx/html
      - ./packages/shared/env/nginx/conf/nginx.conf:/etc/nginx/nginx.conf
      - ./packages/shared/env/nginx/logs:/var/log/nginx

# 打包镜像
# docker-compose build

# 运行指令
# docker-compose up -d

# 修改 docker-compose.yml 后,更新运行
# docker-compose up -d

# 修改源文件运行
# docker-compose down
# docker-compose build
# docker-compose up -d
